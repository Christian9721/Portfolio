---
interface Iprops {
    id: string;
    text: string;
    subtext: string;
    percent: number;
    width: string;
}
const props = Astro.props as Iprops;
const { id = "lineChart", text, percent, subtext, width } = props;
//import Chart from 'chart.js/auto';
//import { getRelativePosition } from 'chart.js/helpers';
---

<div 
    data-text={text} 
    data-subtext={subtext} 
    data-percent={percent} 
    class="sm:flex lineContainer hidden flex-col items-center gap-y-2" style="width: 100%"
>
    <canvas id={id} class="z-10 backdrop-blur-md max-w-[100%] md:max-w-[530px]">
         <!--  <script is:inline lang="ts" type="module">
            import Chart from 'chart.js/auto';

            const transparentColor = "transparent";
            
            async function init() {

                const scriptElement = await document.currentScript as HTMLOrSVGScriptElement;
                console.log(scriptElement)
                const canvas = await scriptElement.parentNode as HTMLCanvasElement;
                const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;
                const parentDiv = canvas.parentNode as HTMLElement;

                const text = parentDiv.getAttribute('data-text');
                //const subtext = parentDiv.getAttribute('data-subtext');
                const percent = parentDiv.getAttribute('data-percent');

                // Crear gradiente
                const gradient = ctx.createLinearGradient(400, 0, 0, 400);
                gradient.addColorStop(0, 'rgb(59 130 246)');
                gradient.addColorStop(1, 'rgb(56 189 248)');
                
                const data = {
                    labels: [ ],
                    datasets: [{
                        label: '',
                        data: [80, 20],
                        backgroundColor: [
                            gradient,
                            'rgb(255,255,255,0.25)'
                        ],
                        borderColor: transparentColor,
                        borderWidth: 0,
                        hoverOffset: 4,
                        //offset: [0, 40]
                    }]
                };
        
                const centerTextPlugin/*:Plugin */= {
                    id: 'centerText',
                    beforeDraw: (chart/*: any*/) => {
                        const { ctx, width, height } = chart;
        
                        ctx.restore();
                        // Texto principal
                        const fontSizePrimary  = (height / 100).toFixed(2);
                        ctx.font = `${fontSizePrimary }em sans-serif`;
                        ctx.textBaseline = 'middle';
        
                        const textPrimary  = `${percent}%`;
                        const textPrimaryX  = Math.round((width - ctx.measureText(textPrimary).width) / 2);
                        const textPrimaryY  = height / 2;
        
                        ctx.fillText(textPrimary, textPrimaryX, textPrimaryY);
                        ctx.save();
                    }
                };
        
                new Chart(
                    document.getElementById('dimensions') as ChartItem,
                    {
                        type: 'doughnut',
                        data: data,
                        options: {
                            plugins: {
                                title: { display: false },
                                legend: { display: false },
                                tooltip: { enabled: false }
                            },
                            elements: {}
                        },
                        plugins: [centerTextPlugin]
                    }
                );
            };
            init();
        </script> -->
    </canvas>
    <label class="font-bold capitalize">{subtext}</label>
</div>

<script >
    import Chart, { type ChartItem, type Plugin, type ChartTypeRegistry } from 'chart.js/auto';

    const transparentColor = "transparent";
    
    async function init() {

        const canvas = await document.getElementById("lineChart") as HTMLCanvasElement;
        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;

        const firstColor = "rgb(56 189 248)";
        const canvasWidth = canvas.width;
        const canvasHeight = canvas.height;
        // Crear gradiente
        const gradient = ctx.createLinearGradient(400, 0, 0, 400);
        gradient.addColorStop(0, 'rgb(59 130 246)');
        gradient.addColorStop(1, firstColor);

         // Crear gradiente para el Ã¡rea de relleno
        const gradientFill = ctx.createLinearGradient(0, 0, 0, canvasHeight * 2);
        gradientFill.addColorStop(0, firstColor); // azul semi-transparente
        gradientFill.addColorStop(1, 'rgba(249, 249, 249, 0)');   // transparente
        
        const dataSet = [1230, 1250, 1300, 1450, 2050, 2200];

        const data = {
            labels: ["Jan","Feb","Mar","Apr","May","Jun"],
            datasets: [{
                data: dataSet,
                fill: true,
                hoverOffset: 4,
                backgroundColor: gradientFill,
                borderColor: firstColor,
                tension: 0.5
            }]
        };

        new Chart(
            document.getElementById('lineChart') as ChartItem,
            {
                type: 'line',
                data: data,
                options: {
                    plugins: {
                        title: { display: false },
                        legend: { display: false },
                        tooltip: { enabled: false }
                    },
                    elements: {
                        line: {
                            borderWidth: 4
                        },
                        point: {
                            radius: dataSet.map((value, index) => index === 3 ? 10 : 0),
                        }
                    },
                    scales: {
                        x: {
                            display: true,
                            grid: {
                                display: false,
                            },
                        },
                        y: {
                            display: true,
                            grid: {
                                display: true
                            }
                        }
                    },
                    responsive: true,
                    maintainAspectRatio: true
                },
            }
        );
    };
    init();
    document.addEventListener("astro:after-swap", init)
</script>

<style>
    #lineChart {
        
        z-index: 50;
    }
</style>
