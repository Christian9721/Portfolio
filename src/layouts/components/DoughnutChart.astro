---
interface Iprops {
    id: string;
    text: string;
    subtext: string;
    percent: number;
    width: string;
}
const props = Astro.props as Iprops;
const { id = "dimensions", text, percent, subtext, width } = props;
//import Chart from 'chart.js/auto';
//import { getRelativePosition } from 'chart.js/helpers';
---

<div 
    data-text={text} 
    data-subtext={subtext} 
    data-percent={percent} 
    style={`width: ${width}`}
    class="flex flex-col items-center gap-y-2"
>
    <canvas id={id} class="z-10 backdrop-blur-md">
         <!--  <script is:inline lang="ts" type="module">
            import Chart from 'chart.js/auto';

            const transparentColor = "transparent";
            
            async function init() {

                const scriptElement = await document.currentScript as HTMLOrSVGScriptElement;
                console.log(scriptElement)
                const canvas = await scriptElement.parentNode as HTMLCanvasElement;
                const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;
                const parentDiv = canvas.parentNode as HTMLElement;

                const text = parentDiv.getAttribute('data-text');
                //const subtext = parentDiv.getAttribute('data-subtext');
                const percent = parentDiv.getAttribute('data-percent');

                // Crear gradiente
                const gradient = ctx.createLinearGradient(400, 0, 0, 400);
                gradient.addColorStop(0, 'rgb(59 130 246)');
                gradient.addColorStop(1, 'rgb(56 189 248)');
                
                const data = {
                    labels: [ ],
                    datasets: [{
                        label: '',
                        data: [80, 20],
                        backgroundColor: [
                            gradient,
                            'rgb(255,255,255,0.25)'
                        ],
                        borderColor: transparentColor,
                        borderWidth: 0,
                        hoverOffset: 4,
                        //offset: [0, 40]
                    }]
                };
        
                const centerTextPlugin/*:Plugin */= {
                    id: 'centerText',
                    beforeDraw: (chart/*: any*/) => {
                        const { ctx, width, height } = chart;
        
                        ctx.restore();
                        // Texto principal
                        const fontSizePrimary  = (height / 100).toFixed(2);
                        ctx.font = `${fontSizePrimary }em sans-serif`;
                        ctx.textBaseline = 'middle';
        
                        const textPrimary  = `${percent}%`;
                        const textPrimaryX  = Math.round((width - ctx.measureText(textPrimary).width) / 2);
                        const textPrimaryY  = height / 2;
        
                        ctx.fillText(textPrimary, textPrimaryX, textPrimaryY);
                        ctx.save();
                    }
                };
        
                new Chart(
                    document.getElementById('dimensions') as ChartItem,
                    {
                        type: 'doughnut',
                        data: data,
                        options: {
                            plugins: {
                                title: { display: false },
                                legend: { display: false },
                                tooltip: { enabled: false }
                            },
                            elements: {}
                        },
                        plugins: [centerTextPlugin]
                    }
                );
            };
            init();
        </script> -->
    </canvas>
    <label class="font-bold capitalize">{subtext}</label>
</div>

<script >
    import Chart, { type ChartItem, type Plugin, type ChartTypeRegistry } from 'chart.js/auto';

    const transparentColor = "transparent";
    
    async function init() {
        const canvas = await document.getElementById("dimensions") as HTMLCanvasElement;
        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;

        // Crear gradiente
        const gradient = ctx.createLinearGradient(200, 0, 0, 400);
        gradient.addColorStop(0, 'rgba(59, 130, 246, 255)');
        gradient.addColorStop(1, 'rgba(56, 189, 248, 0)');
        
        const data = {
            //labels: [ ],
            datasets: [{
                //label: '',
                data: [80, 20],
                backgroundColor: [
                    gradient,
                    'rgb(255,255,255,0.25)'
                ],
                borderColor: transparentColor,
                borderWidth: 0,
                hoverOffset: 4,
            }]
        };

        const centerTextPlugin/*:Plugin */= {
            id: 'centerText',
            beforeDraw: (chart: any) => {
                const { ctx, width, height } = chart;

                ctx.restore();
                // Texto principal
                const fontSizePrimary  = (height / 100).toFixed(2);
                ctx.font = `${fontSizePrimary}em sans-serif`;
                ctx.textBaseline = 'middle';

                const textPrimary  = `${80}%`;
                const textPrimaryX  = Math.round((width - ctx.measureText(textPrimary).width) / 2);
                const textPrimaryY  = height / 2;

                ctx.fillText(textPrimary, textPrimaryX, textPrimaryY);
                ctx.save();
            }
        };

        new Chart(
            document.getElementById('dimensions') as ChartItem,
            {
                type: 'doughnut',
                data: data,
                options: {
                    plugins: {
                        title: { display: false },
                        legend: { display: false },
                        tooltip: { enabled: false }
                    },
                    elements: {}
                },
                plugins: [centerTextPlugin]
            }
        );
    };
    init();
</script>

<style>
    #dimensions {
        z-index: 50;
        clip-path: circle(50% at center);
    }
</style>
