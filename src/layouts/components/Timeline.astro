---
//import React, { useEffect, useMemo, useRef, useState } from "react";
import type { IExperience } from "../../interfaces/experience.interface";
import CardShowcase from "./CardShowcase.component";
import { World } from "../../assets/icons";
import type { TIconKey } from "../../interfaces/IconList";
import { IconList } from "../../constants/Icons";
import type { TExperienceContent } from '../../interfaces/languages.interface';

type TIcon = Array<{ key: TIconKey; Icon: JSX.Element }>;
const { achievements, data } = Astro.props as TExperienceContent;
const { pathname } = Astro.url;
---
  <ul class="timeline before:dark:bg-neutral-500 before:bg-neutral-900">
    {
    data.map((i, idx) => (
      <li class="timeline-event">
        <label class="dark:bg-neutral-500 bg-neutral-950  outline outline-[10px] outline-[#f9f9f9] dark:outline-darkmode-theme-light timeline-event-icon"></label>
        <div class="pl-0 pt-8 pb-8 pr-8 md:pl-8 flex gap-8 flex-wrap timeline-event-copy justify-between">
          <section class={`mr-16 ${i.projects.length > 0 ? 'lg:mr-0 w-full lg:w-1/2' : 'lg:mr-16 lg:w-full w-full xl:w-4/5 flex-1'}`}>
            <p class="dark:bg-neutral-500 bg-neutral-950 timeline-event-thumbnail">
              {i.timePeriod}
            </p>
            <div class="flex items-center gap-4">
              <h3 class="w-min flex-1">{i.company}</h3>
              {i.location && (
                <div class="flex">
                  <World />
                  <span>{i.location}</span>
                </div>
              )}
            </div>
            <h4>{i.title}</h4>
            <p class="hyphens-auto text-justify">{i.description}</p>
            {i.achievements && (
              <div class="flex flex-col mt-3 mb-1 gap-1">
                <h5 class="p-2 bg-neutral-200 dark:bg-neutral-600 rounded-sm">
                  {achievements}
                </h5>
                {i.achievements.map((ach, idy) => {
                  return (
                    <details /*key={`${idx}-${idy}`}*/ name="unique" class="overflow-hidden rounded-sm mb-2 border dark:border-neutral-500 border-blue-gray-100 open:text-blue-400 ">
                      <summary class={`relative p-4 pl-9 cursor-pointer`}>{ach.title}</summary>
                      <div class="hyphens-auto text-justify p-4 block bg-neutral-100 dark:bg-neutral-800 px-10 text-neutral-600 dark:text-neutral-400">
                        {ach.description}
                      </div>
                    </details>
                  )
                })}
              </div>
            )}
          </section>
          {i.projects.length > 0 && (
            <div class="hidden xl:block w-0.5 h-auto border-dashed border-neutral-400 dark:border-neutral-500 border-r-2 " />
          )}
          {i.projects.length > 0 && <section class="md:justify-center md:mr-16 w-auto flex flex-wrap gap-9 content-center flex-1">
            {
              i.projects.map((project, idy) => {
              const data: TIcon = [];
              IconList.forEach((i) => {
                if (project.tools.includes(i.key))
                  data.push({
                    Icon: i.icon,
                    key: i.key,
                  });
              });
              return (
                <div class="flex gap-7 h-fit">
                  <CardShowcase
                    hideDate
                    href={pathname.replace('.html', '')}
                    isTimeline
                    srcImg={project.srcImg || ""}
                    description={project.description || null}
                    keyId={project.keyId || null}
                    title={project.title || null}
                    tools={project.tools || null}
                    endDate={project.endDate}
                    /*key={project.keyId}*/
                  />
                </div>
              );
            })}
          </section>}
        </div>
      </li>
    ))}
  </ul>